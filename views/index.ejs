<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Weather App</title>
        <link rel="stylesheet" href="style.css">
        <script type="text/javascript" src= 'http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js'></script>
        <script src="https://d3js.org/d3.v5.js"></script>
  
    </head>
    <body>
        <div id="container">
            <div id="findWeather">
                <h1>My Weather App</h1>
                <!-- <form>
                    <input type="text" id="location" name="location" placeholder="Enter location">
                    <button>Search Weather</button>
                </form> -->
                <form action="/api" method="post">
                    <input type="text" id="location" name="location" placeholder="Enter location">
                    <!-- <input id="submit" type="submit" value="Submit" name='location' > -->
                    <p>
                        <em>
                                This weather app uses api data from api.openweathermap.org. To get most accurate results, enter the city, country code (e.g. Chicago, US)
                        </em>
                    </p>

                    <button>Search Weather</button>
                </form>
                <div id="results">
                    <!-- <p>Results go here</p> -->
                    <% if (locals.error) { %>
                        <p>Error: <%=locals.error%></p>
                      <% } %>
                    <% if (locals.data) { %>
                        <p>location: <%=locals.data.name%></p>
                        <p>temp: <%=locals.data.temp%></p>
                        <p>temp min: <%=locals.data.min_temp%></p>
                        <p>temp max: <%=locals.data.max_temp%></p>
                        <p>humidity: <%=locals.data.humidity%>%</p>
                        <p>pressure: <%=locals.data.pressure%></p>
                      <% } %>

                    <% if (locals.forecast) { %>
                        <!-- <p>dates: <%#=locals.forecast.dates%></p> -->
                        <!-- <p>temps: <%#=locals.forecast.temps%></p> -->
                        <%# capture data from server into new variable to pass to script %>
                        <% var forecast_data = locals.forecast.temps  %>
                        <% var dates_data = locals.forecast.dates  %>
                    <% } %>

                </div>
                <% if (locals.forecast) { %>    
                <div id="chart">
                    <svg>
                        <defs> <!-- SVG linear gradients docs: https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Gradients -->
                            <linearGradient id="gradient" x1="0" x2="0" y1="0" y2="1">
                                <stop offset="0%" stop-color="orange"/>
                                <stop offset="100%" stop-color="purple"/>
                            </linearGradient>   
                        </defs>
                    </svg>
                </div>
                <% } %>
            </div>
        </div>
        
    </body>


    <!-- <script type="javascript" src="bars.js" ></script> -->
    <script>

        //check to see of there is forecast data before running script

        //pull in forecast temp data variable into new script variable and parse string into array data
        var get_forecast_data = '<%= forecast_data %>';
        var get_forecast_data = get_forecast_data.split(",");
  
        //pull in forecast date/time data variable into new script variable and parse string into array data
        var get_dates_data = '<%= dates_data %>';
        var get_dates_data = get_dates_data.split(",");
        
        if (get_forecast_data && get_dates_data){

            console.log('weather data returned from API:');
            console.log(get_forecast_data);
            console.log(get_dates_data);
        
            
            var height = 500;
            var width = 800;
            var margins = {
                left: 40,
                top: 40,
                right: 40,
                bottom: 40
            }


                var barData = [
                    {
                        strength:get_forecast_data[0],
                        date:get_dates_data[0]
                    },
                    {
                        strength:get_forecast_data[1],
                        date:get_dates_data[1]
                    },
                    {
                        strength:get_forecast_data[2],
                        date:get_dates_data[2]
                    },
                    {
                        strength:get_forecast_data[3],
                        date:get_dates_data[3]
                    },
                    {
                        strength:get_forecast_data[4],
                        date:get_dates_data[4]
                    },
                    {
                        strength:get_forecast_data[5],
                        date:get_dates_data[5]
                    },
                    {
                        strength:get_forecast_data[6],
                        date:get_dates_data[6]
                    },
                    {
                        strength:get_forecast_data[7],
                        date:get_dates_data[7]
                    },
                    {
                        strength:get_forecast_data[8],
                        date:get_dates_data[8]
                    },
                    {
                        strength:get_forecast_data[9],
                        date:get_dates_data[9]
                    },
                ]

                

                // time = d3.timeFormat("%m/%d/%Y %H:%M:%S %p");
                // console.log(time(new Date(get_dates_data[0])));

                var svg = d3.select("svg")
                .attr("width", width)
                .attr("height", height);
                
                // var xscale = d3.scaleLinear()
                // .domain([0,barData.length])
                // .range([0,width-margins.left-margins.right]);
        
                
                var xscale = d3.scaleTime()
                    .domain(d3.extent(barData, function(d){ return new Date(d.date); }))
                    .nice()
                    .range([0,width-margins.left-margins.right-30] )

                
                var yscale = d3.scaleLinear()
                    .domain(d3.extent(barData, function(d){ return d.strength; }))
                    .nice()
                    .range([(height-margins.bottom),margins.top])

                            
                var xaxis = d3.axisBottom(xscale)
                    .tickFormat(d3.timeFormat("%m/%d - %I:%M %p"))
                // .ticks(get_dates_data.length)
                
                var yaxis = d3.axisLeft(yscale)
                // .ticks(barData.length)
                
                var barWidth = Math.floor((width-margins.left-margins.right)/barData.length);
                
                svg.append("g")
                .attr("transform", "translate("+margins.left+","+(height-margins.bottom)+")")
                .call(xaxis)
                .selectAll("text")
                .attr("transform", "rotate(45)")
                .style("text-anchor", "start")
                .style("font", "12px Arial")
                .style("font-weight", "Bold")

                
                svg.append("g")
                .attr("transform", "translate("+margins.left+",0)")
                .call(yaxis)
                .style("font", "12px Arial")
                .style("font-weight", "Bold")
                
                svg.selectAll("rect")
                //retrieve data from data source (ie. barData)
                .data(barData)
                //apply data and append to rectangles
                .enter().append("rect")
                //grows top down; takes full height substracts bottom margin and subtracts starting point.
                .attr("height", function(d){ return height-margins.top-yscale(d.strength); })
                //even bar width
                .attr("width", barWidth)
                //starting x-coordinate
                // .attr("x", function(d,i){ return xscale(i); })
                .attr("x", function(d){ return xscale(new Date(d.date)); })
                //starting y-coordinate
                .attr("y", function(d){ return yscale(d.strength); })
                // .attr("transform", function(d){ return "translate("+(margins.left+barWidth/2)+",0)"; })
                .on("mouseover", function(d){
                    d3.select(this).style("opacity", "0.85");
                })
                .on("mouseout", function(d){
                    d3.select(this).style("opacity", "1.0");
                })
                .attr("transform", function(d){ return "translate("+(margins.left)+",0)"; })
                
            }else{
                console.log('there is no forecast data available!')
            }
                
                
    </script>
</html>